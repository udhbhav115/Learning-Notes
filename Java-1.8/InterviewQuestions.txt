-> What are the Java8 features.?
Ans: The Java8 features are Functional Interface,Lambda Expression,Method References,Streams API,forEach method,static methods in interface,default methods,Optional Class,Collectors Class.

-> What is functional Programming?
Ans: Basically functional programming is a style of writing computer programs that we think that it is simply evaluating the mathematical expressions.

	Ex; If we want to print the elements in the list we have to write the boilerplate code like write a for loop initialize the variable have to iterate till the size ends from functional programming we don't need to bother about all the things we will directly make use of forEach method and print the elements. >>>> What Has to be done but not how
	
-> What is Functional Interface?
Ans: An interface which consists of only one abstract method and any number of static methods,default methods,Object class methods is known as Functional Interface.Functional interface is also called as Single Abstract Method.

The variables inside interface are static and methods are abstract by default.

-> Can we extend a functional interface with non functional interface?
Ans:Yes we can extend but non functional interface should not contains an abstract method.

-> What are the predefined functional interfaces in java?
Ans: There are many predefined functional interfaces are 
1.Function<T,R> = It represents a function takes one argument and return the result.
2.Predicate<T> =  It represents a boolean valued function with one argument with no result.
3.Consumer<T> = It represents an operation that accepts one argument with no result.

-> What is the package name which all perdefined functional interfaces available?
Ans:java.util.function package

-> Can we consider an interface consists of any number of static methods or any number of default methods as functional interface?
Ans: No we cannot consider the above condition as functional interface because it doesn't contains an abstract method

-> Name some Object class methods?
Ans: String toString(),int hashCode(),boolean equals() etc.

-> What are Lambda Expressions?
Ans: Lambda Expression is an anonymous method that is used to implement the abstract method of a functional Inteface.

-> Can we pass lambda expression to a method as an argument?
Ans: Yes we can pass lambda expression to a method but it has to be an abstract method in an interface or default,static methods in an interface. need to see one example.

-> what is the syntax of lambda expression?
Ans: It consists of three parts 1.Set of parameterized fields(0 or more),2.Arrow key(->),3. body

-> Can we use local variables(outer scope) inside Lambda expression?
Ans: Yes we can use the outer scope variables in lambda expression but it has to be effectively final.

-> What is effectively final?
Ans: A variable is consider as effectively final variable if it is not modified after initialization in the local block.

->int count=10;
  count=10+100;
  Runnable runnable=()->{
	System.out.println("hello world "+count);
  };
  runnable.run();
  
Can you say what is error in the code?
Ans: A variable used in the lambda function must be effectively final.Here count value is intialized two times so we cannot consider "count" variable as an effectively final.

-> What is method reference in java?
Ans: It is used to refer a method of a functional interface with the help of scope resolution operator we can access the methods.With the help of method references we can access static,instance methods and constructors. Ex Hello is a class name Hello::new it will access the constructor.

-> What is streams API?
Ans: Streams are basically a pipeline which takes input as a lambda expression to process the sequence of elements

-> What is Stream pipeline?
Ans: stream pipeline is a chain of source,intermediate operations and terminal operaions.

-> What is the package of stream?
Ans: java.util.stream package

-> Which functional interface does map internally contains?
Ans: Internally it contains Function<T,R> interface.

-> Which functional interface does filter internaly contains?
Ans: Internally it contains Predicate<T> interface.

-> What is Map in streams?
Ans: Map is a predefined method of a stream which will convert the stream from one Object type to another Object type.It is a one to one relationship.The Internal implementation of map is Function interface which takes value and return a value.

-> What is flatMap in streams?
Ans: flatMap is an extension of Map which is also used to convert the stream from one object to another object.Apart from that it will do a flattening.
Ex:If we have a list of lists which we want to convert into stream in this case flatMap is used

-> What is reduce in streams?
Ans: Reduce is a terminal operation which is used to produce a single value from the sequence of elements or stream. internally it contains BinaryOperator<T> which internally implements BiFunction<T,T,R>.

-> What is parallelStreams?
Ans: Usually any java code that has only one processing stream which executes sequentially,but in case of parallel streams it will divide the stream into 1 or more streams which will execute parallelly on different cores and it will combine all the outputs into a single stream this is the reason why it will give different outputs for every run. paraller(),parallerStream().

-> What are the difference between collection and stream?
Ans: Collection contains elements while stream doesn't contains any data structure so it will not contains any elements.Practically Streams is a view where it will work on a collection to process the collection but it will not modify the original collection.

-> What is the difference between intermediate operaions and terminal operaions?
Ans: The main difference is intermediate operations like map and filter will return a stream so that we can apply intermediate operaions again but incase of terminal operaions like collect max,min etc we cannot reuse the stream.

-> What is peek method?
Ans: peek method is used to know present situation of a stream pipeline in case of debugging it will be very useful.

-> What are difference between static methods and default methods in interface?
Ans: These two methods are used to implement the body in the interface itself but if can implement the interface with any other class we can able to override the default method but not static method,we can call the default method via implemented class object but cannot the static method.





	
